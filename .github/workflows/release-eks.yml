name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'     
        required: true
        default: '0.8.0'

concurrency:
  group: release-eks

permissions:
  contents: read
  packages: write

jobs:
  release:
    name: "Release ${{ github.ref_name }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    env:
      ECR_HOST: 709825985650.dkr.ecr.us-east-1.amazonaws.com
      ECR_REPO: $ECR_HOST/fermyon/fermyon-spin
      DOCKER_IMAGE: $ECR_REPO/installer-image
      HELM_CHART: $ECR_REPO/installer-chart
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint Chart
        id: lint_chart
        env:
          version: "${{ github.event.inputs.version }}"
        run: |
          helm lint ./chart

          code=0
          if [[ "$(yq '.version' < ./chart/Chart.yaml)" != "${version}" ]]; then
            echo "Chart's version should be $version"
            code=1
          fi

          if [[ "$(yq '.appVersion' < ./chart/Chart.yaml)" != "${version}" ]]; then
            echo "Chart's appVersion should be $version"
            code=1
          fi

          if [[ "$(yq '.image.tag' < ./chart/values.yaml)" != "" && "$(yq '.image.tag' < ./chart/values.yaml)" != "${version}" ]]; then
            echo "Chart's default value for 'image.tag' should be empty or $version"
            code=1
          fi

          if [[ $code -ne 0 ]]; then
            echo "Version linting failed, please fix and push tag again"
            exit 1
          fi

      - name: Login to AWS ECR
        id: login
        run: |
          # TODO: use a service account and don't pass the token around via step output
          token=$(aws ecr get-login-password --region us-east-1)
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_HOST }}
          username: AWS
          password: ${{ steps.login.outputs.token }}

      - name: Helm login
        run: |
          echo ${{ steps.login.outputs.token }} | helm registry login ${{ env.ECR_HOST }} --username AWS --password-stdin

      - name: Docker - Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_IMAGE }}
          tags: |
            ${{ github.event.inputs.version }}-{{ sha }}
            ${{ github.event.inputs.version }}

      - name: Docker - Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./image
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHIM_VERSION=${{ github.event.inputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Helm - Package and Push
        env:
          version: ${{ github.event.inputs.version }}
        run: |
          helm package ./chart --version ${{ env.version }} --app-version ${{ env.version }}-eks
          helm push ./spin-containerd-shim-installer-${{ env.version }}.tgz oci://${{ env.HELM_CHART }}

      - name: clear local credentials
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
          rm -f ${HOME}/.config/helm/registry/config.json
